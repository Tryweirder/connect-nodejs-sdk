/**
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 */

const SquareConnect = require('../../src/index');
const {
  accounts,
  expect,
  assert,
  handleUnexpectedError
} = require('../support/setup');

describe('CustomersApi', function () {
  beforeEach(function () {
    const defaultClient = SquareConnect.ApiClient.instance;
    const oauth2 = defaultClient.authentications['oauth2'];
    oauth2.accessToken = accounts.sandbox.access_token;
    this.api = new SquareConnect.CustomersApi();
  });

  afterEach(async function () {
    const resp = await this.api.listCustomers();
    const customers = resp.customers;

    if (!customers || customers.length === 0) {
      return;
    }

    const deleteCustomerPromises = customers
      .map(customer => this.api.deleteCustomer(customer.id));

    console.info(`Going to delete ${customers.length} customer(s).`);
    return Promise.all(deleteCustomerPromises);
  });

  it('should be authorized. If this fails, everything else might fail too.', async function () {
    const resp = await this.api.listCustomers()
      .catch(handleUnexpectedError);

    expect(resp.errors).to.not.exist;
  });

  describe('createCustomer', function () {
    it('should call createCustomer successfully', async function () {
      const resp = await this.api.createCustomer({given_name: "Bob Dole"})
        .catch(handleUnexpectedError);

      expect(resp).to.have.property('customer');
      expect(resp.customer).to.have.property('given_name', 'Bob Dole');
    });
  });
  // describe('createCustomerCard', function () {
  //   it('should call createCustomerCard successfully', async function () {
  //     const resp = await this.api.createCustomer({given_name: 'Bob Dole'})
  //       .catch(handleUnexpectedError);

  //     const createCardResp = await this.api.createCustomerCard(resp.customer.id, {card_nonce: 'fake-card-nonce-ok'})
  //       .catch(handleUnexpectedError);

  //     expect(createCardResp).to.have.property('card');
  //   });
  // });
  describe('deleteCustomer', function () {
    it('should call deleteCustomer successfully', async function () {
      const createCustomerResp = await this.api.createCustomer({given_name: 'Bob Dole'})
        .catch(handleUnexpectedError);

      const deleteCustomerResp = await this.api.deleteCustomer(createCustomerResp.customer.id)
        .catch(handleUnexpectedError);

      expect(deleteCustomerResp).to.have.property('errors');
      expect(deleteCustomerResp.errors).to.equal(undefined);
    })
  });
  // describe('deleteCustomerCard', function () {
  //   it('should call deleteCustomerCard successfully', async function () {
  //     const createCustomerResp = await this.api.createCustomer({given_name: 'Bob Dole'})
  //       .catch(handleUnexpectedError);

  //     const createCustomerCardResp = await this.api.createCustomerCard(createCustomerResp.customer.id, {card_nonce: 'fake-card-nonce-ok'})
  //       .catch(handleUnexpectedError);


  //     const deleteCustomerCardResp = await this.api.deleteCustomerCard(createCustomerResp.customer.id, createCustomerCardResp.card.id)
  //       .catch(handleUnexpectedError);

  //     expect(deleteCustomerCardResp).to.have.property('errors');
  //     expect(deleteCustomerCardResp.error).to.equal(undefined);
  //   })
  // });
  describe('listCustomers', function () {
    it('should call listCustomers successfully', async function () {
      const createCustomerResp = await this.api.createCustomer({given_name: 'Bob Dole'})
        .catch(handleUnexpectedError);

      const listCustomerResp = await this.api.listCustomers()
        .catch(handleUnexpectedError);

      expect(listCustomerResp).to.have.property('customers');
      expect(listCustomerResp.customers).to.have.lengthOf(1);
    });
  });
  describe('retrieveCustomer', function () {
    it('should call retrieveCustomer successfully', async function () {
      const createCustomerResp = await this.api.createCustomer({given_name: 'Bob Dole'})
        .catch(handleUnexpectedError);

      const retrieveCustomerResp = await this.api.retrieveCustomer(createCustomerResp.customer.id)
        .catch(handleUnexpectedError);

      expect(retrieveCustomerResp).to.have.property('customer');
      expect(retrieveCustomerResp.customer).to.have.property('given_name', 'Bob Dole');
    });
  });
  describe('updateCustomer', function () {
    it('should call updateCustomer successfully', async function () {
      const createCustomerResp = await this.api.createCustomer({given_name: 'Bob Dole'})
        .catch(handleUnexpectedError);

      const updateCustomerResp = await this.api.updateCustomer(createCustomerResp.customer.id, {given_name: 'Rob Lowe'})
        .catch(handleUnexpectedError);

      expect(updateCustomerResp).to.have.property('customer');
      expect(updateCustomerResp.customer).to.have.property('given_name', 'Rob Lowe');
    });
  });
});
